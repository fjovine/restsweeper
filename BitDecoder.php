<?php
// 2020.02.07 Iovine
// Decodes a hex string into a number of target objects.
// A hex string is a string composed by hex digits only 0123456789ABCDEF
class BitDecoder {
	// Local copy of the hex string to be decoded
	private $toDecode;
	// Index of the current hex digit to decode
	private $currentIndex = 0;
	// Index of the current bit in the hext digit being decoded
	private $currentBit = 0;
	// Binary value of the current hex digit.
	private $currentDigit = 0;

	// Returns the next digit of the hex string. If the position is beyond the
	// size of the string, 0 is returned.
	private function NextDigit() {
		if ($this->currentIndex<strlen($this->toDecode)) {
			$result = hexDec($this->toDecode[$this->currentIndex++]);
		} else {
			$result = 0;
		}
		return $result;
	}

	// Gets the next bit in the bit stream generated by the hex string
	// for instance if $toDecode = "5A", che first eight call to this function
	// will return in sequence: false, true, false, true, true, false, true, false
	public function GetNextBit() {
		if ($this->currentBit == 0) 
		{
			$this->currentDigit = $this->NextDigit();
		}
		
		$result = ($this->currentDigit & (0x8 >> $this->currentBit)) != 0;
		
		$this->currentBit ++;
		if ($this->currentBit >= 4) {
			$this->currentBit = 0;
		}
		
		return $result;
	}
	
	// Interprets the bits of $toDecode as the bits of a bidimensional boolean array
	// $rowCout is the number of rows and $colCount is the number of columns.
	// For instance if $toDecode="0F", then calling GetBitmapArray(4,2) will
	// return the following bidimensional boolean array
	// array(array(false,false), array(false,false), array(true,true), array(true,true))
	public function GetBitmapArray($rowCount, $colCount)
	{
		$result = array();
		for ($row = 0; $row<$rowCount; $row++) {
			$result[$row] = array();
			for ($col =0; $col < $colCount; $col++) {
				$bit = $this->GetNextBit();
				$result[$row][$col] = $bit;
			}
		}
		return $result;
	}

	// Creates a new instance of the BitDecoder class with the 
	// passed string as hex string
	function __construct($s) {
		$this->toDecode = $s;
	}
}
?>